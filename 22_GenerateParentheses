/*
Use DFS(backtracking technic to solve this problem.
*/

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        if(n==0)
            return list;
        helper(list,"",0,0,n);
        return list;
    }
    
    
    private void helper(List<String>res, String str, int left, int right, int max)
    {
        if(str.length()==max*2)
        {
            res.add(str);
            return;
        }
        if(left<max)
        {
            helper(res,str+"(",left+1,right,max);
        }
        if(right<left)
        {
            helper(res,str+")",left,right+1,max);
        }
            
    }
}
