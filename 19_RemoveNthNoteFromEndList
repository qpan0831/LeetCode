/*
Used to pointer to point the head of the notes, move one pointer to nth node in front of the second,
and then move the both notes untill the fast one hit the end note,
now use the slow one.  slow.next=slow.next.next to adjust the nth gap.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

/*
1--2--4--5--6--7--9--null  n=2
1--2--4--5--6--9--null
*/
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null) return head;
        ListNode p1 = head;
        ListNode p2 = head;
        for(int i=0;i<n;i++)
        {
            p2=p2.next;
        }
        if(p2==null)
            return head.next;
        
        while(p2.next!=null)
        {
            p1=p1.next;
            p2=p2.next;
        }
        p1.next=p1.next.next;
        return head;
        
    }
}
